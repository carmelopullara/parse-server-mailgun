{"version":3,"sources":["../src/MailgunAdapter.js"],"names":["mailgun","require","mailcomposer","Mustache","co","fs","path","MailAdapter","ERRORS","missing_configuration","missing_mailgun_settings","bad_template_config","invalid_callback","invalid_template_name","MailgunAdapter","constructor","options","Error","apiKey","domain","fromAddress","templates","Object","keys","length","name","subject","pathPlainText","callback","cache","_sendMail","templateVars","message","selectedTemplate","templateName","template","config","direct","recipient","variables","extra","assign","from","to","link","appName","user","lang","get","userVars","_validateUserVars","username","email","subjects","args","_mailGenerator","bind","catch","e","console","error","compiled","pathHtml","cachedTemplate","plainTextEmail","_loadEmailTemplate","toString","text","render","htmlEmail","html","composer","mimeString","Promise","resolve","reject","build","payload","messages","sendMime","body","sendPasswordResetEmail","sendVerificationEmail","send","readFile","err","data","validUserVars","module","exports"],"mappings":"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","file":"MailgunAdapter.js","sourcesContent":["const mailgun = require('mailgun-js');\nconst mailcomposer = require('mailcomposer');\nconst Mustache = require('mustache');\nconst co = require('co');\nconst fs = require('fs');\nconst path = require('path');\nconst MailAdapter = require('./MailAdapter');\n\nconst ERRORS = {\n    missing_configuration: 'MailgunAdapter requires configuration.',\n    missing_mailgun_settings: 'MailgunAdapter requires valid API Key, domain and fromAddress.',\n    bad_template_config: 'MailgunAdapter templates are not properly configured.',\n    invalid_callback: 'MailgunAdapter template callback is not a function.',\n    invalid_template_name: 'Invalid options object: missing templateName'\n};\n\n/**\n * MailAdapter implementation used by the Parse Server to send\n * password reset and email verification emails though Mailgun\n * @classnpm install --save-dev babel-preset-es2015-node\n */\nclass MailgunAdapter extends MailAdapter {\n    constructor(options) {\n        if (!options) {\n            throw new Error(ERRORS.missing_configuration);\n        }\n\n        super(options);\n\n        const { apiKey, domain, fromAddress } = options;\n        if (!apiKey || !domain || !fromAddress) {\n            throw new Error(ERRORS.missing_mailgun_settings);\n        }\n\n        const { templates } = options;\n        if (!templates || Object.keys(templates).length === 0) {\n            throw new Error(ERRORS.bad_template_config);\n        }\n\n        for (let name in templates) {\n            const { subject, pathPlainText, callback } = templates[name];\n\n            if (typeof subject !== 'string' || typeof pathPlainText !== 'string') {\n                throw new Error(ERRORS.bad_template_config);\n            }\n\n            if (callback && typeof callback !== 'function') {\n                throw new Error(ERRORS.invalid_callback);\n            }\n        }\n\n        this.mailcomposer = mailcomposer;\n        this.mailgun = mailgun({ apiKey, domain });\n        this.fromAddress = fromAddress;\n        this.templates = templates;\n        this.cache = {};\n    }\n\n    /**\n     * Method to send MIME emails via Mailgun\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    _sendMail(options) {\n        let templateVars, message, selectedTemplate = {};\n\n        let templateName = selectedTemplate.name = options.templateName;\n        if (!templateName) {\n            throw new Error(ERRORS.invalid_template_name);\n        }\n\n        let template = selectedTemplate.config = this.templates[templateName];\n        if (!template) {\n            throw new Error(`Could not find template with name ${templateName}`);\n        }\n\n        // The adapter is used directly by the user's code instead via Parse Server\n        if (options.direct) {\n            const { subject, fromAddress, recipient, variables, extra } = options;\n\n            if (!recipient) {\n                throw new Error(`Cannot send email with template ${templateName} without a recipient`);\n            }\n\n            templateVars = variables || {};\n            message = Object.assign({\n                from: fromAddress || this.fromAddress,\n                to: recipient,\n                subject: subject || template.subject\n            }, extra || {});\n        } else {\n            const { link, appName, user } = options;\n            const { callback } = template;\n            const lang = user.get('lang') || 'en';\n\n            let userVars;\n            if (callback && typeof callback === 'function') {\n                userVars = callback(user);\n                userVars = this._validateUserVars(userVars);\n            }\n\n            templateVars = Object.assign({\n                link,\n                appName,\n                username: user.get('username'),\n                email: user.get('email')\n            }, userVars);\n\n            message = {\n                from: this.fromAddress,\n                to: user.get('email'),\n                subject: template.subjects.lang\n            };\n        }\n\n        const args = { templateVars, message, selectedTemplate };\n        return co(this._mailGenerator.bind(this, args)).catch(e => console.error(e));\n    }\n\n    /**\n     * Generator function that handles that handles all the async operations:\n     * template loading, MIME string building and email sending.\n     */\n    *_mailGenerator(args) {\n        let compiled;\n        let { config: template, name: templateName } = args.selectedTemplate;\n        let { message, templateVars } = args;\n        let pathPlainText = template.pathPlainText;\n        let pathHtml = template.pathHtml;\n        let cachedTemplate = this.cache[templateName] = this.cache[templateName] || {};\n\n        // Load plain-text version\n        if (!cachedTemplate['text']) {\n            let plainTextEmail = yield this._loadEmailTemplate(pathPlainText);\n            plainTextEmail = plainTextEmail.toString('utf8');\n            cachedTemplate['text'] = plainTextEmail;\n        }\n\n        // Compile plain-text template\n        message.text = Mustache.render(cachedTemplate['text'], templateVars);\n\n        // Load html version if available\n        if (pathHtml) {\n            if (!cachedTemplate['html']) {\n                let htmlEmail = yield this._loadEmailTemplate(pathHtml);\n                cachedTemplate['html'] = htmlEmail.toString('utf8');\n            }\n            // Add processed HTML to the message object\n            message.html = Mustache.render(cachedTemplate['html'], templateVars);;\n        }\n\n        // Initialize mailcomposer with message\n        const composer = this.mailcomposer(message);\n\n        // Create MIME string\n        const mimeString = yield new Promise((resolve, reject) => {\n            composer.build((error, message) => {\n                if (error) reject(error);\n                resolve(message);\n            });\n        });\n\n        // Assemble payload object for Mailgun\n        const payload = {\n            to: message.to,\n            message: mimeString.toString('utf8')\n        };\n\n        return new Promise((resolve, reject) => {\n            this.mailgun.messages().sendMime(payload, (error, body) => {\n                if (error) reject(error);\n                resolve(body);\n            });\n        });\n    }\n\n    /**\n     * sendMail wrapper to send an email with password reset link\n     * The options object would have the parameters link, appName, user\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    sendPasswordResetEmail({ link, appName, user }) {\n        const lang = user.get('lang') || 'en';\n\n        return this._sendMail({ templateName: `passwordResetEmail_${lang}`, link, appName, user });\n    }\n\n    /**\n     * sendMail wrapper to send an email with an account verification link\n     * The options object would have the parameters link, appName, user\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    sendVerificationEmail({ link, appName, user }) {\n      const lang = user.get('lang') || 'en';\n\n      return this._sendMail({ templateName: `verificationEmail_${lang}`, link, appName, user });\n    }\n\n    /**\n     * sendMail wrapper to send general purpose emails\n     * The options object would have the parameters:\n     * - templateName: name of template to be used\n     * - subject: overrides the default value\n     * - fromAddress: overrides the default from address\n     * - recipient: email's recipient\n     * - variables: An object whose property names represent template variables,\n     *              and whose values will replace the template variable placeholders\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    send({ templateName, subject, fromAddress, recipient, variables, extra }) {\n        return this._sendMail({ templateName, subject, fromAddress, recipient, variables, extra, direct: true });\n    }\n\n    /**\n     * Simple Promise wrapper to asynchronously fetch the contents of a template.\n     * @param {String} path\n     * @returns {Promise}\n     */\n    _loadEmailTemplate(path) {\n        return new Promise((resolve, reject) => {\n            fs.readFile(path, (err, data) => {\n                if (err) reject(err);\n                resolve(data);\n            });\n        });\n    }\n\n    /**\n     * Validator for user provided template variables\n     * @param {Object} userVars\n     * @returns {Object}\n     */\n    _validateUserVars(userVars) {\n        const validUserVars = userVars && userVars.constructor === Object;\n        // Fall back to an empty object if the callback did not return an Object instance\n        return validUserVars ? userVars : {};\n    }\n}\n\nmodule.exports = MailgunAdapter;\n"]}